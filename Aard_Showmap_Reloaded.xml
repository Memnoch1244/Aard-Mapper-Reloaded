<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Thursday, January 25, 2024, 04:19 AM -->
<!-- MuClient version 5.07 -->

<muclient>
<plugin
   name="Aard_Showmap_Reloaded"
   author="Memnoch"
   id="f971d85d61ed0da5db694f84"
   language="Lua"
   purpose="Shows link to player created maps in a web browser."
   date_written="2024-01-25 04:19:25"
   requires="5.07"
   version="2.1"
   save_state="y"
   >

<description trim="y">
<![CDATA[

showmap            - display links to all maps for area you are currently in
showmap [areaname] - display links to all maps for area you specify 
showmap list       - lists of all areas with external map data (short name)
showmap togglevi   - enables or disables visually impaired mode (opens automatically VI map if available for area)
showmap version    - displays the version of the Showmap plugin (also visible in help)
showmap help       - shows only this help
showmap reload     - reloads the plugin
	
Special thanks to Myth for providing updated map data. 
Special thanks to The Midgaardian Publishing Group and Boot Camp for archiving and hosting.
Credit to Pwar for the original Showmap.

]]>
</description>

</plugin>

<!--  Aliases  -->

<aliases>
  <alias
   match="^showmap (.+)$"
   script="showmap_kw"
   omit_from_output="n"
   omit_from_log="n"
   omit_from_command_history="n"
   enabled="y"
   sequence="100"
   regexp="y"
  >
  </alias>
    
  <alias
   match="^showmap$"
   script="showmap_nokw"
   omit_from_output="n"
   omit_from_log="n"
   omit_from_command_history="n"
   enabled="y"
   sequence="100"
   regexp="y"
  >
  </alias>

  <alias
   match="^showmap update$"
   script="update_maps_list"
   omit_from_output="n"
   omit_from_log="n"
   omit_from_command_history="n"
   enabled="y"
   sequence="99"
   regexp="y"
  >
  </alias>

  <alias
   match="^showmap reload$"
   script="reload"
   omit_from_output="n"
   omit_from_log="n"
   omit_from_command_history="n"
   enabled="y"
   sequence="99"
   regexp="y"
  >
  </alias>

</aliases>

<script>
<![CDATA[
require "gmcphelper"
require "async"
require "json"
require "tprint"

local mapTable = {}   -- holds all gaardian area data
local mapTable2 = {}   -- holds all bootmap area data
local showmap_ver = "2.1"
local area_kw   -- current area
local areaid   -- searched area
local toggle_vi = false
local MAP_LINKS = "https://aardwolfboot.com/maps-json/"

-- Ensure DB file exists
function file_exists(name)
  local f=io.open(name,"r")
  if f~=nil then 
    io.close(f) 
    return true 
  else 
    return false 
  end  -- if
end  -- function

-- Called by showmap with a wildcard
function showmap_kw(name, line, wildcards)
  areaid = nil

  -- Check to see what the wildcard is first
  if wildcards ~= nil then
    wildcards[1] = string.lower(wildcards[1])  -- force lowercase for match
    if wildcards[1] == "help" then
      ColourNote("springgreen","black","Showmap Reloaded v" .. showmap_ver .. " for Aardwolf by Memnoch")
      ColourNote("springgreen","black","=============================================")
      Note(GetPluginInfo(GetPluginID(), 3))
      Send("")
      return
    elseif wildcards[1] == "version" then
      ColourNote("springgreen","black","Currently running version: Showmap Reloaded v" .. showmap_ver .. " by Memnoch")
      Send("")
      return
    elseif wildcards[1] == "ft2" then
      areaid = "ftii"
    elseif wildcards[1] == "list" then
      for i = 1, #mapTable do
        ColourNote("springgreen", "black", mapTable[i].area)
        if mapTable[i].map ~= "No map available" then
          Hyperlink(mapTable[i].map, mapTable[i].map .. " - Gaardian Maps", "Click link to be taken to your web browser.", "cornflowerblue", "black", 1)
        else
          Tell("No Gaardian map available")
        end
        Note("")
        for j = 1, #mapTable2 do
          if mapTable[i].keyword == mapTable2[j].keyword then
            for k, v in pairs (mapTable2[j]) do
              if k ~= "keyword" then
                Hyperlink(mapTable2[j][k], mapTable2[j][k] .. " - Boot Maps", "Clink link to be taken to your web browser.", "cornflowerblue","black", 1)
                Note("")
              end
            end
          end
        end
        Note("")
      end  -- for
      Send("")
      return
    elseif wildcards[1] == "togglevi" then
      if toggle_vi == false then
        toggle_vi = true
        Note("Showmap VI mode toggled on.")
      else
        toggle_vi = false
        Note("Showmap VI mode toggled off.")
      end
      Send("")
      return
    else
      areaid = wildcards[1]
    end  -- if type of wildcard entered
  end  -- if wildcards

  -- Convert areaid to lowercase for matching
  if areaid ~= nil then
    areaid = string.lower(areaid)
  end

  -- If found, returns the row ID
  areafound = find_area(areaid)

  -- Display the area details and map link if available
  if areafound then

    if toggle_vi == false then
      ColourTell("springgreen","black", "Showmap Reloaded v" .. showmap_ver .. " for Aardwolf by Memnoch")
      Note("")
      Note("")
      ColourTell("springgreen","black", mapTable[areafound].area .. " (")
      ColourTell("yellow","black", mapTable[areafound].keyword)
      ColourTell("springgreen","black", ") - [Lvl " .. mapTable[areafound].minlvl .. " - " .. mapTable[areafound].maxlvl .. "] - Builder(s): " .. mapTable[areafound].builder)
      Note("")
      ColourTell("springgreen","black", "Speedwalk: ")
      ColourTell("yellow","black", mapTable[areafound].speedwalk)
      Note("")
      ColourTell("springgreen","black", "Goal: ")
      ColourTell("yellow","black", mapTable[areafound].goal)
      Note("")
      Note("")

      -- Check DB to see if a map is available
      if mapTable[areafound].map == "No map available" then
        ColourTell("red","black","No map currently available for this zone.")
        Send("")
      else
        ColourTell("springgreen","black","Hosted by: ")
        ColourTell("magenta","black","The Midgaardian Publishing Group")
        Note("")
        Hyperlink(mapTable[areafound].map, mapTable[areafound].map, "Click link to be taken to your web browser.", "cyan", "black", 1)
        Note("")
        Note("")
        ColourTell("springgreen","black","Hosted by: ")
        ColourTell("lime","black", "Boot Camp")
        Note("")
        for j = 1, #mapTable2 do
          if mapTable[areafound].keyword == mapTable2[j].keyword then
            for k, v in pairs (mapTable2[j]) do
              if k ~= "keyword" then
                Hyperlink(mapTable2[j][k], mapTable2[j][k] .. " - Boot Maps", "Clink link to be taken to your web browser.", "cyan","black", 1)
                Note("")
              end
            end
          end
        end
        Send("")
      end  -- if
    else
      Note(mapTable[areafound].area .. " with keyword " .. mapTable[areafound].keyword)
      Note("Level range from " .. mapTable[areafound].minlvl .. " to " .. mapTable[areafound].maxlvl)
      Note("")
      Note("Map hosted by The Midgaardian Publishing Group")
      Hyperlink(mapTable[areafound].vimap, mapTable[areafound].vimap, "Click link to be taken to your web browser.", "cyan", "black", 1)
      Send("")
    end  -- if check for VI
  else
    ColourTell("red","black", "No maps found for " .. areaid .. " in the database.")
    Send("")
  end  -- if

end  -- function

-- Called by showmap with no wildcards
function showmap_nokw()
  areaid = area_kw

  -- areaid pulled from current zone
  if areaid ~= nil then
    areaid = string.lower(areaid)
  end  -- if

  -- If found, returns the row ID
  areafound = find_area(areaid)

  -- Display the area details and map link if available
  if areafound then
    
    ColourTell("springgreen","black", "Showmap Reloaded v" .. showmap_ver .. " for Aardwolf by Memnoch")
    Note("")
    Note("")
    ColourTell("springgreen","black", mapTable[areafound].area .. " (")
    ColourTell("yellow","black", mapTable[areafound].keyword)
    ColourTell("springgreen","black", ") - [Lvl " .. mapTable[areafound].minlvl .. " - " .. mapTable[areafound].maxlvl .. "] - Builder(s): " .. mapTable[areafound].builder)
    Note("")
    ColourTell("springgreen","black", "Speedwalk: ")
    ColourTell("yellow","black", mapTable[areafound].speedwalk)
    Note("")
    ColourTell("springgreen","black", "Goal: ")
    ColourTell("yellow","black", mapTable[areafound].goal)
    Note("")
    Note("")

    -- Check DB to see if a map is available
    if mapTable[areafound].map == "No map available" then
      ColourTell("red","black","No map currently available for this zone.")
      Send("")
    else
      ColourTell("springgreen","black","Hosted by: ")
      ColourTell("magenta","black","The Midgaardian Publishing Group")
      Note("")
      Hyperlink(mapTable[areafound].map, mapTable[areafound].map, "Click link to be taken to your web browser.", "cyan", "black", 1)
      Note("")
      Note("")
      ColourTell("springgreen","black","Hosted by: ")
      ColourTell("lime","black", "Boot Camp")
      Note("")
      for j = 1, #mapTable2 do
        if mapTable[areafound].keyword == mapTable2[j].keyword then
          for k, v in pairs (mapTable2[j]) do
            if k ~= "keyword" then
              Hyperlink(mapTable2[j][k], mapTable2[j][k] .. " - Boot Maps", "Clink link to be taken to your web browser.", "cyan","black", 1)
              Note("")
            end
          end
        end
      end
      Send("")
    end  -- if

  else
    ColourTell("red","black", "No maps found for " .. areaid .. " in the database.")
    Send("")
  end  -- if

end  --function

-- Checks to see if the keyword is in the DB
function find_area(wildcards)
  for i = 1, #mapTable do
    if (string.find(mapTable[i].keyword, wildcards)) ~= nil then
      return i
    end  -- if
  end  -- for loop
  return false
end  -- function

function OnPluginBroadcast(msg, id, name, text)
  -- GMCP Handler plugin
  if id == "3e7dedbe37e44942dd46d264" then
    -- Capturing the current zone
    if text == "room.info" then
      area_kw = gmcp("room.info.zone")
    end  -- area logging
  end  -- id check
end  -- function

function OnPluginInstall()
  -- Sets the file path to the default plugin folder for MUSH
  local dbFilePath = GetInfo(60) .. "showmapdb.db"
  local rowCount = 0
  local rowCount2 = 0

  -- Request current zone data
  Send_GMCP_Packet("request area")

  -- Check to ensure the DB file is in the plugin folder
  if not file_exists(dbFilePath) then
    ColourNote("red", "", "ERROR: Unable to locate database file " .. dbFilePath)
    ColourNote("red", "", "Reinstall the plugin and ensure showmapdb.db is in the plugins folder.")
    return
  end

  -- If the DB file isn't loaded into the plugin then load it
  if not db then
    db = assert (sqlite3.open(dbFilePath))
    local table_exists = false

    -- SQL select statement to get all table data
    for row in db:nrows("SELECT * FROM areas ORDER BY keyword ASC") do
      
      rowCount = rowCount + 1
      if row["area"] ~= nil then
        mapTable[rowCount] = row
      end  -- if
      if mapTable ~= nil then
        table_exists = true
      end  -- if
    end  -- for

    -- If the areas table isn't found in the DB it will throw an error
    if not table_exists then
      ColourNote("red", "", "ERROR: Found database file but unable to locate gaardian table in database. Your database file may be corrupt. Please reinstall the plugin and database file.")
      return
    else
      Note("[LOADED] Showmap Reloaded v" .. showmap_ver .. " by Memnoch (showmap help)")
      Note("Successfully loaded data for " .. #mapTable .. " areas from the Midgaardian database.")
    end  -- if
  end  -- if

  if not db2 then
    db2 = assert (sqlite3.open(dbFilePath))
    local table2_exists = false

    for row in db2:nrows("SELECT * FROM bootmaps ORDER BY keyword ASC") do

      rowCount2 = rowCount2 + 1
      if row["keyword"] ~= nil then
        mapTable2[rowCount2] = row
        for k, v in pairs(mapTable2[rowCount2]) do
          if mapTable2[rowCount2][k] == "No map available" then
            mapTable2[rowCount2][k] = nil
          end
        end
      end
      if mapTable2 ~= nil then
        table2_exists = true
      end
    end

    if not table2_exists then
      ColourNote("red", "", "ERROR: Found database file but unable to locate bootmaps table in database. Your database file may be corrupt. Please reinstall the plugin and database file.")
      return
    else
      Note("Successfully loaded data for " .. #mapTable2 .. " areas from the Boot Camp database.")
    end  -- if
  end  -- if

end  -- function

------ EXPERIMENTAL ------
function html_decode(html)
  html = string.gsub(html, '&lt;', '<')
  html = string.gsub(html, '&gt;', '>')
  html = string.gsub(html, '&amp;', '&')
  html = string.gsub(html, '&#8221;', '"')
  html = string.gsub(html, '&#8220;', '"')
  html = string.gsub(html, '&#8243;', '"')
  html = string.gsub(html, '&#8216;', '\'')
  html = string.gsub(html, '&#8217;', '\'')
  html = string.gsub(html, '&#8211;', '-')
  html = string.gsub(html, '<br>', '')
  html = string.gsub(html, ' target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\"', '')
  html = string.gsub(html, ' </a>', '</a>')
  return html
end

function update_maps_list()
  async.doAsyncRemoteRequest(MAP_LINKS, update_maps_list_callback, "HTTPS")
end

function update_maps_list_callback(retval, page, status, headers, full_status, request_url)
  if status ~= 200 then
    ColourNote("red", "", "Could not download maps json")
  else
    ColourNote("springgreen", "", "Successfully downloaded maps json page. Updating map data")
    local map_data = string.match(page, "<p>(.-)</p>")
    map_data = html_decode(map_data)
    local decoded = json.decode(map_data)
    decoded = decoded.data
    decoded = fixjson(decoded)
--    tprint(decoded)
    update_maps_from_live_data(decoded)
  end
end

function update_maps_from_live_data(map_data)

  db2:exec [[
    DROP TABLE IF EXISTS bootmaps;
    CREATE TABLE bootmaps (keyword, map1, map2, map3, map4, map5, map6);
  ]]

  for i = 1, #map_data do
    if map_data[i][1] ~= "Area" then
      sqlstr = "INSERT INTO bootmaps VALUES ('" .. map_data[i][2]
      for j = 8, 13 do
        if map_data[i][j] then
          sqlstr = sqlstr .. "', '" .. map_data[i][j]
        else
          sqlstr = sqlstr .. "', 'No map available"
        end
      end
      sqlstr = sqlstr .. "');"

      db2:exec(sqlstr)

    end  -- if
  end  -- for

  ColourNote("springgreen", "", "Updated map data.  Reloading plugin.")
  reload()

end

function fixjson(decode_data)

  for i = 1, #decode_data do
    decode_data[i][1] = Trim(decode_data[i][1])
    decode_data[i][1] = string.gsub(decode_data[i][1], "<a href(.-)>", "")
    decode_data[i][1] = string.gsub(decode_data[i][1], "</a>", "")
    decode_data[i][1] = string.gsub(decode_data[i][1], "'", "''")
    decode_data[i][2] = string.gsub(decode_data[i][2], ">(.-)<", "><")
    decode_data[i][2] = string.gsub(decode_data[i][2], "</a>", "")
    decode_data[i][4] = string.gsub(decode_data[i][4], "N/A", "immhomes")
    line_split = 0
    decode_data[i][2] = (utils.split(decode_data[i][2], "<"))
    table.remove(decode_data[i][2],1)
    for k, v in ipairs(decode_data[i][2]) do
      v = string.gsub(v, "a href=\"", "")
      v = string.gsub(v, "\">", "")
      table.insert(decode_data[i], #decode_data[i] + 1, v)
    end
    table.remove(decode_data[i], 3)
    table.remove(decode_data[i], 2)
  end
  return decode_data
end

function reload()
  ColourNote("springgreen", "", "Reloading Showmap")
  Execute(GetAlphaOption("script_prefix") .. "DoAfterSpecial(1, \"ReloadPlugin('" .. GetPluginID() .. "')\", sendto.script)")
end

]]>
</script> 

</muclient>
